{% set name = "libcublas" %}
{% set version = "12.5.2.13" %}
{% set cuda_version = "12.5" %}
{% set platform = "linux-x86_64" %}  # [linux64]
{% set platform = "linux-ppc64le" %}  # [ppc64le]
{% set platform = "linux-sbsa" %}  # [aarch64]
{% set platform = "windows-x86_64" %}  # [win]
{% set target_name = "x86_64-linux" %}  # [linux64]
{% set target_name = "ppc64le-linux" %}  # [ppc64le]
{% set target_name = "sbsa-linux" %}  # [aarch64]
{% set target_name = "x64" %}  # [win]
{% set extension = "tar.xz" %}  # [not win]
{% set extension = "zip" %}  # [win]

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://developer.download.nvidia.com/compute/cuda/redist/{{ name }}/{{ platform }}/{{ name }}-{{ platform }}-{{ version }}-archive.{{ extension }}
  sha256: 5f17ba6912181162adec83b42e76ba6e8c7e0cb9c872e8dacacb09f0b42b3d8e  # [linux64]
  sha256: 08413962b5a35f38c0d1c9a7f65e201ff59aa85841a650141f064eaaff06e841  # [aarch64]
  sha256: cafd968c326c21deaca5f870a8c3dd1b7830809b693fe326a198f5e4bbd5c5ff  # [win]

build:
  number: 0
  binary_relocation: false
  skip: true  # [osx or ppc64le]

test:
  requires:
    - patchelf  # [linux]
  files:
    - test-rpath.sh
  commands:
    - test -L $PREFIX/lib/libcublas.so.{{ version }}                                          # [linux]
    - test -L $PREFIX/lib/libcublas.so.{{ version.split(".")[0] }}                            # [linux]
    - test -L $PREFIX/targets/{{ target_name }}/lib/libcublas.so.{{ version.split(".")[0] }}  # [linux]
    - test -f $PREFIX/targets/{{ target_name }}/lib/libcublas.so.{{ version }}                # [linux]
    - bash test-rpath.sh                                                                      # [linux]
    - if not exist %LIBRARY_BIN%\cublas64_{{ version.split(".")[0] }}.dll exit 1              # [win]
    - if not exist %LIBRARY_BIN%\cublasLt64_{{ version.split(".")[0] }}.dll exit 1            # [win]
    - if not exist %LIBRARY_BIN%\nvblas64_{{ version.split(".")[0] }}.dll exit 1              # [win]

outputs:
  - name: libcublas
    files:
      - lib/lib*blas*.so.*                            # [linux]
      - targets/{{ target_name }}/lib/lib*blas*.so.*  # [linux]
      - Library\bin\cublas*.dll                       # [win]
      - Library\bin\nvblas*.dll                       # [win]
    requirements:
      build:
        - {{ compiler("c") }}
        - {{ compiler("cxx") }}
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
        - {{ stdlib("c") }}
        - patchelf <0.18.0                      # [linux]
      host:
         - cuda-version {{ cuda_version }}
      run:
         - {{ pin_compatible("cuda-version", max_pin="x.x") }}
         # In 12.0/12.1 libcublas runtime will try to dlopen nvrtc due to a bug
         # so it must be listed as a runtime dependency.
         # See https://github.com/conda-forge/libcublas-feedstock/issues/9
         - cuda-nvrtc
      run_constrained:
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
    # Tests are defined at the top level, due to package/output name conflicts.
    about:
      home: https://developer.nvidia.com/cublas
      license: LicenseRef-NVIDIA-End-User-License-Agreement
      license_file: LICENSE
      license_url: https://docs.nvidia.com/cuda/eula/index.html
      summary: An implementation of BLAS (Basic Linear Algebra Subprograms) on top of the NVIDIA CUDA runtime.
      description: |
        The cuBLAS Library provides a GPU-accelerated implementation of the basic linear algebra subroutines (BLAS).
      doc_url: https://docs.nvidia.com/cuda/cublas/

  - name: libcublas-dev
    build:
      run_exports:
        - {{ pin_subpackage("libcublas", max_pin="x") }}
    files:
      - lib/lib*blas*.so                            # [linux]
      - lib/pkgconfig                               # [linux]
      - targets/{{ target_name }}/include           # [linux]
      - targets/{{ target_name }}/lib/lib*blas*.so  # [linux]
      - targets/{{ target_name }}/lib/stubs         # [linux]
      # Not shipping Fortran bindings (in src) on Windows for now
      - targets/{{ target_name }}/libcublas/src     # [linux and not aarch64]
      - Library\include                             # [win]
      - Library\lib                                 # [win]
    requirements:
      build:
        - {{ compiler("c") }}
        - {{ compiler("cxx") }}
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
        - {{ stdlib("c") }}
      host:
        - cuda-version {{ cuda_version }}
      run:
        - {{ pin_compatible("cuda-version", max_pin="x.x") }}
        - {{ pin_subpackage("libcublas", exact=True) }}
      run_constrained:
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
        - libcublas-static >={{ version }}      # [linux]
    test:
      commands:
        - test -L $PREFIX/lib/libcublas.so                                    # [linux]
        - test -L $PREFIX/lib/libcublasLt.so                                  # [linux]
        - test -L $PREFIX/lib/libnvblas.so                                    # [linux]
        - test -f $PREFIX/lib/pkgconfig/cublas*.pc                            # [linux]
        - test -f $PREFIX/targets/{{ target_name }}/include/cublas.h          # [linux]
        - test -f $PREFIX/targets/{{ target_name }}/include/cublasLt.h        # [linux]
        - test -f $PREFIX/targets/{{ target_name }}/include/nvblas.h          # [linux]
        - test -L $PREFIX/targets/{{ target_name }}/lib/libcublas.so          # [linux]
        - test -L $PREFIX/targets/{{ target_name }}/lib/libcublasLt.so        # [linux]
        - test -L $PREFIX/targets/{{ target_name }}/lib/libnvblas.so          # [linux]
        - test -f $PREFIX/targets/{{ target_name }}/lib/stubs/libcublas.so    # [linux]
        - test -f $PREFIX/targets/{{ target_name }}/lib/stubs/libcublasLt.so  # [linux]
        - test -f $PREFIX/targets/{{ target_name }}/libcublas/src/fortran.c   # [linux and not aarch64]
        - test -f $PREFIX/targets/{{ target_name }}/libcublas/src/fortran.h   # [linux and not aarch64]
        - if not exist %LIBRARY_INC%\cublas.h exit 1                          # [win]
        - if not exist %LIBRARY_INC%\cublasLt.h exit 1                        # [win]
        - if not exist %LIBRARY_INC%\nvblas.h exit 1                          # [win]
        - if not exist %LIBRARY_LIB%\cublas.lib exit 1                        # [win]
        - if not exist %LIBRARY_LIB%\cublasLt.lib exit 1                      # [win]
        - if not exist %LIBRARY_LIB%\nvblas.lib exit 1                        # [win]
    about:
      home: https://developer.nvidia.com/cublas
      license: LicenseRef-NVIDIA-End-User-License-Agreement
      license_file: LICENSE
      license_url: https://docs.nvidia.com/cuda/eula/index.html
      summary: An implementation of BLAS (Basic Linear Algebra Subprograms) on top of the NVIDIA CUDA runtime.
      description: |
        The cuBLAS Library provides a GPU-accelerated implementation of the basic linear algebra subroutines (BLAS).
      doc_url: https://docs.nvidia.com/cuda/cublas/

  - name: libcublas-static
    build:
      skip: True  # [not linux]
    files:
      - targets/{{ target_name }}/lib/lib*blas*_static.a
    requirements:
      build:
        - {{ compiler("c") }}
        - {{ compiler("cxx") }}
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
        - {{ stdlib("c") }}
      host:
        - cuda-version {{ cuda_version }}
      run:
        - {{ pin_compatible("cuda-version", max_pin="x.x") }}
        # In 12.0/12.1 libcublas runtime will try to dlopen nvrtc due to a bug
        # so it must be listed as a runtime dependency.
        # See https://github.com/conda-forge/libcublas-feedstock/issues/9
        - cuda-nvrtc
      run_constrained:
        - arm-variant * {{ arm_variant_type }}  # [aarch64]
    test:
      commands:
        - test -f $PREFIX/targets/{{ target_name }}/lib/libcublas_static.a
        - test -f $PREFIX/targets/{{ target_name }}/lib/libcublasLt_static.a
    about:
      home: https://developer.nvidia.com/cublas
      license: LicenseRef-NVIDIA-End-User-License-Agreement
      license_file: LICENSE
      license_url: https://docs.nvidia.com/cuda/eula/index.html
      summary: An implementation of BLAS (Basic Linear Algebra Subprograms) on top of the NVIDIA CUDA runtime.
      description: |
        The cuBLAS Library provides a GPU-accelerated implementation of the basic linear algebra subroutines (BLAS).
      doc_url: https://docs.nvidia.com/cuda/cublas/

about:
  home: https://developer.nvidia.com/cublas
  license: LicenseRef-NVIDIA-End-User-License-Agreement
  license_file: LICENSE
  license_url: https://docs.nvidia.com/cuda/eula/index.html
  summary: An implementation of BLAS (Basic Linear Algebra Subprograms) on top of the NVIDIA CUDA runtime.
  description: |
    The cuBLAS Library provides a GPU-accelerated implementation of the basic linear algebra subroutines (BLAS).
  doc_url: https://docs.nvidia.com/cuda/cublas/

extra:
  recipe-maintainers:
    - conda-forge/cuda
